prime O(sqrt(n)):

bool isPrime(int n)
{
    if (n <= 1)
        return false;
    if (n == 2 || n == 3)
        return true;
    if (n % 2 == 0 || n % 3 == 0)
        return false;
    for (int i = 5; i*i <=n; i = i + 6)
        {
            if (n % i == 0 || n % (i + 2) == 0)
            return false;
        }
 
    return true;
}
-another fast code:
const int N = 1e7 + 7;
vector<int>prime(N, 1);
void isPrime()
{
        prime[0] = prime[1] = 0;
	for (int i = 4; i < N; i += 2) {
		prime[i] = 0;
	}
	for (int i = 3; i * i < N; i += 2) {
		if (prime[i]) {
			for (int j = i * i; j < N; j += i + i) {
				prime[j] = 0;
			}
		}
	}
}

# Prime Functions

## Function to check if Number is Prime or Not

```cpp
bool isprime(long long x){
    if(x==1) return false;
    for(long long i=2;i*i<=x;i++){
        if(x%i==0)return false;
    }
    return true;
}  //with no fear of Overflow!!
```

---

## Prime Factors

```cpp
vector<int>P_Factors;
void Prime_Factors(int x){
    for(int i=2;i*i<=x;i++){
        while(x%i==0){
            x/=i;
            P_Factors.push_back(i);
        }
    }
    if(x!=1){
        P_Factors.push_back(x);
    }
    sort(all(P_Factors));
}
```

---

## T-Primes

t-prime is the number has only 3 Divisors 

```cpp
//to check if Numbere has 3 Divisors or NOt
map<ll,bool>mp;
    mp[0]=mp[1]=true;
    for(ll i=2;i*i<=1e6;i++){
        if(!mp[i]){
            for(int j=i*i;j<=1e6;j+=i){
                mp[j]=true;
            }
        }
    }

ll x; cin>>x;
        ll z=(ll)sqrt(x);
        if(z*z==x&&!mp[z])
            cout<<"YES"<<endl;
        else cout<<"NO"<<endl;
```

---

## Generate Prime Factors

```cpp
vector<int>v;
    int x; cin>>x;
    for(int i=2;i*i<=x;i++){
        while(x%i==0){
            v.push_back(i);
            x/=i;
        }
    }
    if(x)v.push_back(x);
    for(auto it:v)cout<<it<<" ";
```

---

Find Kth ugly number  

ugly number number has only {2,3,5} prime factors 

```cpp
set<long long>st;
    int k; cin>>k;
    if(k==1||k==2||k==3||k==4||k==5)return cout<<k<<endl,0; Default value
    st.insert(1);
    k--;
    while(k--){
        auto it= st.begin();
        long long x=*it;
        st.erase(it);
        st.insert(x*2);
        st.insert(x*3);
        st.insert(x*5);
    } //when k =1 first element in the set will be the Kth ugly number!!
    cout<<*st.begin()<<endl;

```

---

## number of primes within range

if you want to know only the number of primes from 1 to n 

you can use this simple formula : 

```cpp
int n=10;
cout<<int(n/log(n))<<endl; //log her is = ln 
//you need to cast it to int caue it will return floating value
```
***************************************************************************************
# Sieve

## Ordinary Sieve

take n(log(log n)) time  which is great 
the inside loop run as n/2 + n/3 + n/4 + n/5 â€¦. till end 

```cpp
bool composite[100000];
void ordinary_Sieve(){
    composite[0]=composite[1]=1;
    for(int i=2;i<=100;i++){
        if(!composite[i]){
            for(int j=i*i;j<=100;j+=i){
                composite[j]=1;
            }
        }
    }
}
```

but this may be some primes has the same factors or multiples so ordinary Sieve will iterate over same number more than one 

what is the optimization? 

## Linear Sieve

time analysis is O(n) time 

```cpp
bool composite[100000];
vector<int> primes;
void linear_Sieve() {
    composite[0] = composite[1] = 1;
    for (int i = 2; i <= 100; i++) {
        if (!composite[i])primes.emplace_back(i);
        for (int j = 0; j < primes.size() && i * primes[j] <= 100; j++) {
            composite[primes[j] * i] = 1;
            if (i % primes[j] == 0)break;
        }

}
```

linear sieve will iterate over the number one time only and also will iterate over numbers less than max value yo wan